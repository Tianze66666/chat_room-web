"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

AUTH_USER_MODEL = 'accounts.User'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ys9q#imzw6=8k7gh7e3x*y+&$p_6=(k7)(5#vi64l+nr4l2=8+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', '120.26.129.134', config('ALLOW_HOSTS')]

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	"chat.apps.ChatConfig",
	"accounts.apps.AccountsConfig",
	"rest_framework",
	'rest_framework_simplejwt.token_blacklist',
	'corsheaders',
	"message.apps.MessageConfig",
	"channel.apps.ChannelConfig"
]

MIDDLEWARE = [
	'corsheaders.middleware.CorsMiddleware',
	'whitenoise.middleware.WhiteNoiseMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOW_ALL_ORIGINS = True
ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [BASE_DIR / 'templates']
		,
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
	# 'default': {
	#     'ENGINE': 'django.db.backends.sqlite3',
	#     'NAME': BASE_DIR / 'db.sqlite3',
	# }
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'NAME': 'ChatRoom',
		'HOST': config('DB_HOST'),
		'PORT': config('DB_PORT'),
		'USER': config('DB_USER'),
		'PASSWORD': config('DB_PASSWORD'),
		'POOL_OPTIONS': {
			'POOL_SIZE': 10,
			'MAX_OVERFLOW': 30,
		}
	}
}

# redis配置
CHANNEL_LAYERS = {
	"default": {
		"BACKEND": "channels_redis.core.RedisChannelLayer",
		"CONFIG": {
			"hosts": [
				config('REDIS_URL')
			],
		},
	},
}

# Celery Redis Broker 配置
from urllib.parse import quote_plus

REDIS_PASSWORD = quote_plus(config('REDIS_PASSWORD'))
CELERY_BROKER_URL = f"redis://:{REDIS_PASSWORD}@{config('REDIS_HOST')}:{config('REDIS_PORT')}/5"

REDIS_CACHE_CONFIG = {
	"host": config('REDIS_HOST'),
	"port": config('REDIS_PORT'),
	"db": 4,
	"password": config('REDIS_PASSWORD'),
	"decode_responses": True
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# 用户后端验证类
AUTHENTICATION_BACKENDS = [
	'accounts.auth_backend.EmailBackend',
	'django.contrib.auth.backends.ModelBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

# 时间设置
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False
USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'static'),
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#邮箱配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'  # SMTP服务器，比如QQ邮箱
EMAIL_PORT = 587  # 端口，一般587或465
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# drf配置
REST_FRAMEWORK = {
	# jwt配置
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'utils.jwt_authentication.JWTAuthentication',
	),
	# 配置序列化器异常处理函数
	'EXCEPTION_HANDLER': 'utils.exception_handle.custom_exception_handler',
}

# 配置 token 过期时间
from datetime import timedelta

SIMPLE_JWT = {
	'ACCESS_TOKEN_LIFETIME': timedelta(minutes=300),  # access token 有效期
	'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # refresh token 有效期
	'ROTATE_REFRESH_TOKENS': True,
	'BLACKLIST_AFTER_ROTATION': True,
}
